{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/CollisionError.js","webpack:///./src/Position.js","webpack:///./src/Cell.js","webpack:///./src/ViewPort.js","webpack:///./src/World.js","webpack:///./src/HtmlCanvas.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CollisionError","residingCell","collidingCell","_classCallCheck","this","Position","x","y","Position_classCallCheck","position","coords","exec","isNaN","parseInt","console","log","topLeft","top","topRight","left","right","bottomLeft","bottom","bottomRight","concat","Cell","Cell_classCallCheck","animated","neighbours","cell","animate","isAnimate","tickWhenAnimate","tickWhenInanimate","shouldDie","die","shouldLive","liveNeighbours","length","newNeighbours","_toConsumableArray","hasLessThan2LiveNeighbours","hasMoreThan3LiveNeighbours","has3LiveNeighbours","filter","neighbour","ViewPort","ViewPort_classCallCheck","World","World_classCallCheck","grid","Map","cells","_this","forEach","seedCell","emptyPositionInRange","_this2","nextGeneration","positionsOfInterest","Set","boundaryPositions","add","toString","liveCellPositions","flatMap","World_toConsumableArray","neighbouringPositions","foo","fromString","tickCell","cellAt","nextGenCell","addNeighbours","neighboursOf","tick","removeNeighbours","set","positionInRange","has","dead","initialWidth","initialheight","Math","floor","random","deadCell","Array","from","values","viewPort","boundaries","positions","push","keys","map","toSmallest","smallest","min","toBiggest","biggest","max","topMost","reduce","leftMost","bottomMost","rightMost","HtmlCanvas","canvas","gridSize","scale","HtmlCanvas_classCallCheck","lastPrint","height","width","context","getContext","world","currentPrint","HtmlCanvas_toConsumableArray","stillPrinted","toPrint","toClear","render","color","fillStyle","fillRect","alive","seed","canvasEl","document","getElementById","viewport","print","frame","addEventListener","draw","requestAnimationFrame","cancelAnimationFrame"],"mappings":"aACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,6CC3EeC,EANb,SAAAA,EAAYC,EAAcC,gGAAeC,CAAAC,KAAAJ,GACvCI,KAAKF,cAAgBA,EACrBE,KAAKH,aAAeA,6KCHHI,aACnB,SAAAA,EAAYC,EAAGC,gGAAGC,CAAAJ,KAAAC,GAChBD,KAAKE,EAAIA,EACTF,KAAKG,EAAIA,2DAGOE,GAChB,IAAMC,EAAS,uBAAuBC,KAAKF,GAI3C,QAHKC,GAAUE,MAAMC,SAASH,EAAO,GAAI,MAAQE,MAAMC,SAASH,EAAO,GAAI,OACzEI,QAAQC,IAAI,CAAEN,aAET,IAAIJ,EAASQ,SAASH,EAAO,GAAI,IAAKG,SAASH,EAAO,GAAI,4CAIjE,OAAO,IAAIL,EAASD,KAAKE,EAAI,EAAGF,KAAKG,EAAI,iCAIzC,OAAO,IAAIF,EAASD,KAAKE,EAAGF,KAAKG,EAAI,sCAIrC,OAAO,IAAIF,EAASD,KAAKE,EAAI,EAAGF,KAAKG,EAAI,kCAIzC,OAAO,IAAIF,EAASD,KAAKE,EAAI,EAAGF,KAAKG,mCAIrC,OAAO,IAAIF,EAASD,KAAKE,EAAI,EAAGF,KAAKG,wCAIrC,OAAO,IAAIF,EAASD,KAAKE,EAAI,EAAGF,KAAKG,EAAI,oCAIzC,OAAO,IAAIF,EAASD,KAAKE,EAAGF,KAAKG,EAAI,yCAIrC,OAAO,IAAIF,EAASD,KAAKE,EAAI,EAAGF,KAAKG,EAAI,mDAIzC,MAAO,CACLH,KAAKY,UACLZ,KAAKa,MACLb,KAAKc,WAELd,KAAKe,OACLf,KAAKgB,QAELhB,KAAKiB,aACLjB,KAAKkB,SACLlB,KAAKmB,kDAKP,UAAAC,OAAWpB,KAAKE,EAAhB,MAAAkB,OAAsBpB,KAAKG,EAA3B,yiBC2BWkB,aAxFb,SAAAA,iGAAcC,CAAAtB,KAAAqB,GACZrB,KAAKuB,UAAW,EAChBvB,KAAKwB,WAAa,wDAIlB,OAAO,IAAIH,kCAIX,IAAMI,EAAO,IAAIJ,EAGjB,OAFAI,EAAKC,UAEED,sCAIP,OAAOzB,KAAK2B,YACR3B,KAAK4B,kBACL5B,KAAK6B,8DAIJ7B,KAAK8B,aAIV9B,KAAK+B,kDAIA/B,KAAKgC,cAIVhC,KAAK0B,uDAIL,OAAsC,IAA/B1B,KAAKiC,eAAeC,6CAI3B,OAAyB,IAAlBlC,KAAKuB,6CAIZ,OAAyB,IAAlBvB,KAAKuB,2CAIZvB,KAAKuB,UAAW,wCAGJY,GACZnC,KAAKwB,WAAL,GAAAJ,OAAAgB,EAAsBpC,KAAKwB,YAA3BY,EAA0CD,kCAK1CnC,KAAKuB,UAAW,uDAIhB,OAAOvB,KAAKiC,eAAeC,OAAS,uDAQpC,OAAOlC,KAAKiC,eAAeC,OAAS,sCAIpC,OAAOlC,KAAKqC,8BAAgCrC,KAAKsC,kEAIjD,OAAOtC,KAAKuC,gEAIZvC,KAAKwB,WAAa,0CAhBlB,OAAOxB,KAAKwB,WAAWgB,OAAO,SAAAC,GAAS,OAAIA,EAAUd,uDCrEpCe,EACnB,SAAAA,EAAY9B,EAASO,gGAAawB,CAAA3C,KAAA0C,GAChC1C,KAAKY,QAAUA,EACfZ,KAAKmB,YAAcA,kgBCiLRyB,aA9Kb,SAAAA,EAAYzB,gGAAa0B,CAAA7C,KAAA4C,GACvB5C,KAAK8C,KAAO,IAAIC,IAChB/C,KAAKmB,YAAcA,sDA4ChB6B,GAAO,IAAAC,EAAAjD,KACVgD,EAAME,QAAQ,SAACzB,GACbwB,EAAKE,SAAS1B,EAAMwB,EAAKG,0BAE3B1C,QAAQC,IAAI,0CAGP,IAAA0C,EAAArD,KACCsD,EAAiB,IAAIP,IACrBQ,EAAsB,IAAIC,IAEhCxD,KAAKyD,kBAAkBP,QAAQ,SAAA7C,GAAQ,OAAIkD,EAAoBG,IAAIrD,EAASsD,cAE5E3D,KAAK4D,kBACFC,QAAQ,SAAAxD,GAAQ,OAAKA,GAALe,OAAA0C,EAAkBzD,EAAS0D,4BAC3Cb,QAAQ,SAAA7C,GAAQ,OAAIkD,EAAoBG,IAAIrD,EAASsD,cAExDJ,EACGL,QAAQ,SAACc,GACR,IAAM3D,EAAWJ,EAASgE,WAAWD,GACrCX,EAAKa,SAAS7D,EAASH,EAAGG,EAASF,EAAGmD,KAsC1CtD,KAAK8C,KAAOQ,mCAGLpD,EAAGC,EAAGmD,GACb,IAAMjD,EAAW,IAAIJ,EAASC,EAAGC,GAC3BsB,EAAOzB,KAAKmE,OAAO9D,GAEnB+D,EAAc,IAAI/C,EACpBI,EAAKE,aACPyC,EAAY1C,UAGd0C,EAAYC,cAAcrE,KAAKsE,aAAajE,IAC5C+D,EAAYG,OACZH,EAAYI,mBAERJ,EAAYzC,aACd2B,EAAemB,IAAIpE,EAASsD,WAAYS,kDAK1C,IAAI/D,EACJ,GACEA,EAAWL,KAAK0E,wBACT1E,KAAK8C,KAAK6B,IAAItE,EAASsD,aAChC,OAAOtD,mCAGAoB,EAAMpB,GACb,IAAMlB,EAAMkB,EAASsD,WAErB,GAAI3D,KAAK8C,KAAK6B,IAAIxF,GAChB,MAAM,IAAIS,EAAeI,KAAK8C,KAAKrE,IAAIU,GAAMsC,GAG/CzB,KAAK8C,KAAK2B,IAAItF,EAAKsC,kCAGdpB,GACL,IAAMlB,EAAMkB,EAASsD,WACrB,OAAO3D,KAAK8C,KAAKrE,IAAIU,IAAQkC,EAAKuD,iDAIlC,IAAMC,EAAe7E,KAAKmB,YAAYjB,EAAI,EACpC4E,EAAgB9E,KAAKmB,YAAYhB,EAAI,EACrCD,EAAI6E,KAAKC,MAAMD,KAAKE,SAAWJ,GAAgBE,KAAKC,MAAMH,EAAe,GACzE1E,EAAI4E,KAAKC,MAAMD,KAAKE,SAAWH,GAAiBC,KAAKC,MAAMF,EAAgB,GAEjF,OAAO,IAAI7E,EAASC,EAAGC,wCAGZE,GACX,IAAM6E,EAAW7D,EAAKuD,OACtB,MAAO,CACL5E,KAAK8C,KAAKrE,IAAI4B,EAASO,UAAU+C,aAAeuB,EAChDlF,KAAK8C,KAAKrE,IAAI4B,EAASQ,MAAM8C,aAAeuB,EAC5ClF,KAAK8C,KAAKrE,IAAI4B,EAASS,WAAW6C,aAAeuB,EAEjDlF,KAAK8C,KAAKrE,IAAI4B,EAASU,OAAO4C,aAAeuB,EAC7ClF,KAAK8C,KAAKrE,IAAI4B,EAASW,QAAQ2C,aAAeuB,EAE9ClF,KAAK8C,KAAKrE,IAAI4B,EAASY,aAAa0C,aAAeuB,EACnDlF,KAAK8C,KAAKrE,IAAI4B,EAASa,SAASyC,aAAeuB,EAC/ClF,KAAK8C,KAAKrE,IAAI4B,EAASc,cAAcwC,aAAeuB,iCAnKtD,OAAOC,MAAMC,KAAKpF,KAAK8C,KAAKuC,oDAQ5B,IAJA,IAAMC,EAAWtF,KAAKuF,WAChBC,EAAY,GAGPtF,EAAMoF,EAAS1E,QAAfV,EAAwBA,GAAKoF,EAASnE,YAAYjB,EAAGA,IAC9DsF,EAAUC,KAAK,IAAIxF,EAASC,EAAGoF,EAAS1E,QAAQT,GAAI,IAAIF,EAASC,EAAGoF,EAASnE,YAAYhB,IAI3F,QAAWA,EAAMmF,EAAS1E,QAAfT,EAAwBA,GAAKmF,EAASnE,YAAYhB,EAAGA,IAC9DqF,EAAUC,KAAK,IAAIxF,EAASqF,EAAS1E,QAAQV,EAAGC,GAAI,IAAIF,EAASqF,EAASnE,YAAYjB,EAAGC,IAG3F,OAAOqF,4CAIP,OAAOL,MAAMC,KAAKpF,KAAK8C,KAAK4C,QAAQC,IAAI,SAAAxG,GAAG,OAAIc,EAASgE,WAAW9E,wCAInE,IAAMqG,EAAYL,MAAMC,KAAKpF,KAAK8C,KAAK4C,OAAQ,SAAArF,GAAQ,OAAIJ,EAASgE,WAAW5D,KACzEuF,EAAa,SAACC,EAAUhH,GAAX,OAAqBkG,KAAKe,IAAID,EAAUhH,IACrDkH,EAAY,SAACC,EAASnH,GAAV,OAAoBkG,KAAKkB,IAAID,EAASnH,IAElDqH,EAAUV,EAAUG,IAAI,SAAAtF,GAAQ,OAAIA,EAASF,IAAGgG,OAAOP,GACvDQ,EAAWZ,EAAUG,IAAI,SAAAtF,GAAQ,OAAIA,EAASH,IAAGiG,OAAOP,GACxDS,EAAab,EAAUG,IAAI,SAAAtF,GAAQ,OAAIA,EAASF,IAAGgG,OAAOJ,GAC1DO,EAAYd,EAAUG,IAAI,SAAAtF,GAAQ,OAAIA,EAASH,IAAGiG,OAAOJ,GAE/D,OAAO,IAAIrD,EACT,IAAIzC,EAASmG,EAAW,EAAGF,EAAU,GACrC,IAAIjG,EAASqG,EAAY,EAAGD,EAAa,wiBC9C1BE,aACnB,SAAAA,EAAYC,EAAQC,EAAUC,gGAAOC,CAAA3G,KAAAuG,GACnCvG,KAAK4G,UAAY,IAAIpD,IAErBgD,EAAOK,OAASH,EAAQD,EACxBD,EAAOM,MAAQJ,EAAQD,EAEvBzG,KAAK+G,QAAUP,EAAOQ,WAAW,MACjChH,KAAK+G,QAAQL,MAAMA,EAAOA,wDAGtBO,GAAO,IAAAhE,EAAAjD,KACLkH,EAAeC,EAAIF,EAAMnE,KAAK4C,QAG9B0B,EAAe,IAAI5D,IAAI0D,EAAa1E,OAAO,SAAAnC,GAAQ,OAAI4C,EAAK2D,UAAUjC,IAAItE,MAG1EgH,EAAU,IAAI7D,IAAI0D,EAAa1E,OAAO,SAAAnC,GAAQ,OAAK+G,EAAazC,IAAItE,MAGpEiH,EAAUH,EAAInH,KAAK4G,WAAWpE,OAAO,SAAAnC,GAAQ,OAAK+G,EAAazC,IAAItE,KAEzEL,KAAKuH,OAAOF,EAAS,SACrBrH,KAAKuH,OAAOD,EAAS,QAErBtH,KAAK4G,UAAY,IAAIpD,IAAI0D,kCAGpBG,EAASG,GAAO,IAAAnE,EAAArD,KACrBA,KAAK+G,QAAQU,UAAYD,EACzBrC,MAAMC,KAAKiC,EAAS,SAAAhH,GAAQ,OAAIJ,EAASgE,WAAW5D,KACjD6C,QAAQ,SAAA7C,GAAQ,OAAIgD,EAAK0D,QAAQW,SAASrH,EAASH,EAAGG,EAASF,EAAG,EAAG,0CCzBtEgB,EAAc,IAAIlB,EAASwG,IAAcA,KACzCQ,EAAQ,IAAIrE,EAAMzB,GACT,CACb,IAAIlB,EAAS,EAAG,GAChB,IAAIA,EAAS,EAAG,GAChB,IAAIA,EAAS,EAAG,GAChB,IAAIA,EAAS,EAAG,GAChB,IAAIA,EAAS,EAAG,IAEXiD,QAAQ,SAAA7C,GAAQ,OAAI4G,EAAM9D,SAAS9B,EAAKsG,QAAStH,KAExD4G,EAAMW,KAAKzC,MAAMC,KAAK,CAAElD,OAASuE,MAA6B,kBAAMpF,EAAKsG,WAEzE,IAAME,EAAWC,SAASC,eAAe,cAEnCC,EAAW,IAAItF,EACnB,IAAIzC,EAAS,EAAG,GAChBkB,GAEFT,QAAQC,IAAIqH,GAEZ,IAAMxB,EAAS,IAAID,EAAWsB,EAvBb,IADG,GA0BpBnH,QAAQC,IAAI,CACVsG,QACAT,SACAwB,aAGFxB,EAAOyB,MAAMhB,EAAOe,GACpB,IAAIE,EAAQ,KACZJ,SAASC,eAAe,aAAaI,iBAAiB,QAAS,YAChD,SAAPC,IACJnB,EAAM1C,OACNiC,EAAOyB,MAAMhB,EAAOe,GACpBE,EAAQG,sBAAsBD,GAEhCA,KAGFN,SAASC,eAAe,YAAYI,iBAAiB,QAAS,WAC5DG,qBAAqBJ,KAGvBJ,SAASC,eAAe,YAAYI,iBAAiB,QAAS,WAC5DlB,EAAM1C,OACNiC,EAAOyB,MAAMhB,EAAOe","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","class CollisionError {\n  constructor(residingCell, collidingCell) {\n    this.collidingCell = collidingCell;\n    this.residingCell = residingCell;\n  }\n}\n\nexport default CollisionError;\n","export default class Position {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  static fromString(position) {\n    const coords = /\\((-?\\d+), (-?\\d+)\\)/.exec(position);\n    if (!coords || isNaN(parseInt(coords[1], 10)) || isNaN(parseInt(coords[2], 10))) {\n      console.log({ position });\n    }\n    return new Position(parseInt(coords[1], 10), parseInt(coords[2], 10));\n  }\n\n  topLeft() {\n    return new Position(this.x - 1, this.y - 1);\n  }\n\n  top() {\n    return new Position(this.x, this.y - 1);\n  }\n\n  topRight() {\n    return new Position(this.x + 1, this.y - 1);\n  }\n\n  left() {\n    return new Position(this.x - 1, this.y);\n  }\n\n  right() {\n    return new Position(this.x + 1, this.y);\n  }\n\n  bottomLeft() {\n    return new Position(this.x - 1, this.y + 1);\n  }\n\n  bottom() {\n    return new Position(this.x, this.y + 1);\n  }\n\n  bottomRight() {\n    return new Position(this.x + 1, this.y + 1);\n  }\n\n  neighbouringPositions() {\n    return [\n      this.topLeft(),\n      this.top(),\n      this.topRight(),\n\n      this.left(),\n      this.right(),\n\n      this.bottomLeft(),\n      this.bottom(),\n      this.bottomRight(),\n    ];\n  }\n\n  toString() {\n    return `(${this.x}, ${this.y})`;\n  }\n}\n","class Cell {\n  constructor() {\n    this.animated = false;\n    this.neighbours = [];\n  }\n\n  static dead() {\n    return new Cell();\n  }\n\n  static alive() {\n    const cell = new Cell();\n    cell.animate();\n\n    return cell;\n  }\n\n  tick() {\n    return this.isAnimate()\n      ? this.tickWhenAnimate()\n      : this.tickWhenInanimate();\n  }\n\n  tickWhenAnimate() {\n    if (!this.shouldDie()) {\n      return;\n    }\n\n    this.die();\n  }\n\n  tickWhenInanimate() {\n    if (!this.shouldLive()) {\n      return;\n    }\n\n    this.animate();\n  }\n\n  has3LiveNeighbours() {\n    return this.liveNeighbours.length === 3;\n  }\n\n  isInanimate() {\n    return this.animated === false;\n  }\n\n  isAnimate() {\n    return this.animated === true;\n  }\n\n  animate() {\n    this.animated = true;\n  }\n\n  addNeighbours(newNeighbours) {\n    this.neighbours = [...this.neighbours, ...newNeighbours];\n  }\n\n\n  die() {\n    this.animated = false;\n  }\n\n  hasLessThan2LiveNeighbours() {\n    return this.liveNeighbours.length < 2;\n  }\n\n  get liveNeighbours() {\n    return this.neighbours.filter(neighbour => neighbour.isAnimate());\n  }\n\n  hasMoreThan3LiveNeighbours() {\n    return this.liveNeighbours.length > 3;\n  }\n\n  shouldDie() {\n    return this.hasLessThan2LiveNeighbours() || this.hasMoreThan3LiveNeighbours();\n  }\n\n  shouldLive() {\n    return this.has3LiveNeighbours();\n  }\n\n  removeNeighbours() {\n    this.neighbours = [];\n  }\n}\n\nexport default Cell;\n","export default class ViewPort {\n  constructor(topLeft, bottomRight) {\n    this.topLeft = topLeft;\n    this.bottomRight = bottomRight;\n  }\n}\n","import CollisionError from './CollisionError';\nimport Position from './Position';\nimport Cell from './Cell';\nimport ViewPort from './ViewPort';\n\nclass World {\n  constructor(bottomRight) {\n    this.grid = new Map();\n    this.bottomRight = bottomRight;\n  }\n\n  get cells() {\n    return Array.from(this.grid.values());\n  }\n\n  get boundaryPositions() {\n    const viewPort = this.boundaries;\n    const positions = [];\n\n    // top & bottom row\n    for (let { x } = viewPort.topLeft; x <= viewPort.bottomRight.x; x++) {\n      positions.push(new Position(x, viewPort.topLeft.y), new Position(x, viewPort.bottomRight.y));\n    }\n\n    // left & right sides\n    for (let { y } = viewPort.topLeft; y <= viewPort.bottomRight.y; y++) {\n      positions.push(new Position(viewPort.topLeft.x, y), new Position(viewPort.bottomRight.x, y));\n    }\n\n    return positions;\n  }\n\n  get liveCellPositions() {\n    return Array.from(this.grid.keys()).map(key => Position.fromString(key));\n  }\n\n  get boundaries() {\n    const positions = Array.from(this.grid.keys(), position => Position.fromString(position));\n    const toSmallest = (smallest, value) => Math.min(smallest, value);\n    const toBiggest = (biggest, value) => Math.max(biggest, value);\n\n    const topMost = positions.map(position => position.y).reduce(toSmallest);\n    const leftMost = positions.map(position => position.x).reduce(toSmallest);\n    const bottomMost = positions.map(position => position.y).reduce(toBiggest);\n    const rightMost = positions.map(position => position.x).reduce(toBiggest);\n\n    return new ViewPort(\n      new Position(leftMost - 1, topMost - 1),\n      new Position(rightMost + 1, bottomMost + 1),\n    );\n  }\n\n  seed(cells) {\n    cells.forEach((cell) => {\n      this.seedCell(cell, this.emptyPositionInRange());\n    });\n    console.log('seeded!');\n  }\n\n  tick() {\n    const nextGeneration = new Map();\n    const positionsOfInterest = new Set();\n\n    this.boundaryPositions.forEach(position => positionsOfInterest.add(position.toString()));\n\n    this.liveCellPositions\n      .flatMap(position => [position, ...position.neighbouringPositions()])\n      .forEach(position => positionsOfInterest.add(position.toString()));\n\n    positionsOfInterest\n      .forEach((foo) => {\n        const position = Position.fromString(foo);\n        this.tickCell(position.x, position.y, nextGeneration);\n      });\n\n    // for (let { y } = viewPort.topLeft; y <= viewPort.bottomRight.y; y++) {\n    //   for (let { x } = viewPort.topLeft; x <= viewPort.bottomRight.x; x++) {\n    //     this.tickCell(x, y, nextGeneration);\n    //   }\n    // }\n\n\n    // get the bounding box\n\n    // get the topLeftMost cell\n    // get min of that and veiwport topLeftMost\n    // get the bottomRightMost cell\n    // get min of that and viewport bottomRightMost\n\n    // add a perimeter to it\n\n    // traverse the perimeter, ticking the dead cells\n\n    // traverse the top and bottom rows\n    // for (let { x } = viewPort.topLeft; x <= viewPort.bottomRight.x; x++) {\n    //   this.tickCell(x, viewPort.topLeft.y, nextGeneration);\n    //   this.tickCell(x, viewPort.bottomRight.y, nextGeneration);\n    // }\n\n    // for (let { y } = viewPort.topLeft; y <= viewPort.bottomRight.y; y++) {\n    //   this.tickCell(viewPort.topLeft.x, y, nextGeneration);\n    //   this.tickCell(viewPort.bottomRight.x, y, nextGeneration);\n    // }\n\n    // visit each live cell and tick it\n    // this.grid.forEach((cell, coords) => {\n    //   const position = Position.fromString(coords);\n    //   this.tickCell(position.x, position.y, nextGeneration);\n    // });\n\n    this.grid = nextGeneration;\n  }\n\n  tickCell(x, y, nextGeneration) {\n    const position = new Position(x, y);\n    const cell = this.cellAt(position);\n\n    const nextGenCell = new Cell();\n    if (cell.isAnimate()) {\n      nextGenCell.animate();\n    }\n\n    nextGenCell.addNeighbours(this.neighboursOf(position));\n    nextGenCell.tick();\n    nextGenCell.removeNeighbours();\n\n    if (nextGenCell.isAnimate()) {\n      nextGeneration.set(position.toString(), nextGenCell);\n    }\n  }\n\n  emptyPositionInRange() {\n    let position;\n    do {\n      position = this.positionInRange();\n    } while (this.grid.has(position.toString()));\n    return position;\n  }\n\n  seedCell(cell, position) {\n    const key = position.toString();\n\n    if (this.grid.has(key)) {\n      throw new CollisionError(this.grid.get(key), cell);\n    }\n\n    this.grid.set(key, cell);\n  }\n\n  cellAt(position) {\n    const key = position.toString();\n    return this.grid.get(key) || Cell.dead();\n  }\n\n  positionInRange() {\n    const initialWidth = this.bottomRight.x / 2;\n    const initialheight = this.bottomRight.y / 2;\n    const x = Math.floor(Math.random() * initialWidth) + Math.floor(initialWidth / 2);\n    const y = Math.floor(Math.random() * initialheight) + Math.floor(initialheight / 2);\n\n    return new Position(x, y);\n  }\n\n  neighboursOf(position) {\n    const deadCell = Cell.dead();\n    return [\n      this.grid.get(position.topLeft().toString()) || deadCell,\n      this.grid.get(position.top().toString()) || deadCell,\n      this.grid.get(position.topRight().toString()) || deadCell,\n\n      this.grid.get(position.left().toString()) || deadCell,\n      this.grid.get(position.right().toString()) || deadCell,\n\n      this.grid.get(position.bottomLeft().toString()) || deadCell,\n      this.grid.get(position.bottom().toString()) || deadCell,\n      this.grid.get(position.bottomRight().toString()) || deadCell,\n    ];\n  }\n}\n\nexport default World;\n","import Position from './Position';\n\nexport default class HtmlCanvas {\n  constructor(canvas, gridSize, scale) {\n    this.lastPrint = new Set();\n\n    canvas.height = scale * gridSize;\n    canvas.width = scale * gridSize;\n\n    this.context = canvas.getContext('2d');\n    this.context.scale(scale, scale);\n  }\n\n  print(world) {\n    const currentPrint = [...world.grid.keys()];\n\n    // don't need to redraw the intersect of the lastPrint and this print\n    const stillPrinted = new Set(currentPrint.filter(position => this.lastPrint.has(position)));\n\n    // need to draw the current print minus the last print\n    const toPrint = new Set(currentPrint.filter(position => !stillPrinted.has(position)));\n\n    // need to clear the last print minus the current print\n    const toClear = [...this.lastPrint].filter(position => !stillPrinted.has(position));\n\n    this.render(toPrint, 'black');\n    this.render(toClear, 'gray');\n\n    this.lastPrint = new Set(currentPrint);\n  }\n\n  render(toPrint, color) {\n    this.context.fillStyle = color;\n    Array.from(toPrint, position => Position.fromString(position))\n      .forEach(position => this.context.fillRect(position.x, position.y, 1, 1));\n  }\n}\n","import World from './World';\nimport Position from './Position';\nimport Cell from './Cell';\nimport ViewPort from './ViewPort';\nimport HtmlCanvas from './HtmlCanvas';\n\nconst canvasScale = 5;\nconst gridSize = 200;\n\nconst bottomRight = new Position(gridSize - 1, gridSize - 1);\nconst world = new World(bottomRight);\nconst glider = [\n  new Position(1, 0),\n  new Position(2, 1),\n  new Position(0, 2),\n  new Position(1, 2),\n  new Position(2, 2),\n];\nglider.forEach(position => world.seedCell(Cell.alive(), position));\n\nworld.seed(Array.from({ length: (gridSize * gridSize / 16) }, () => Cell.alive()));\n\nconst canvasEl = document.getElementById('the-canvas');\n\nconst viewport = new ViewPort(\n  new Position(0, 0),\n  bottomRight,\n);\nconsole.log(viewport);\n\nconst canvas = new HtmlCanvas(canvasEl, gridSize, canvasScale);\n\nconsole.log({\n  world,\n  canvas,\n  viewport,\n});\n\ncanvas.print(world, viewport);\nlet frame = null;\ndocument.getElementById('start-btn').addEventListener('click', () => {\n  const draw = () => {\n    world.tick();\n    canvas.print(world, viewport);\n    frame = requestAnimationFrame(draw);\n  };\n  draw();\n});\n\ndocument.getElementById('stop-btn').addEventListener('click', () => {\n  cancelAnimationFrame(frame);\n});\n\ndocument.getElementById('tick-btn').addEventListener('click', () => {\n  world.tick();\n  canvas.print(world, viewport);\n  // clearInterval(interval);\n});\n"],"sourceRoot":""}